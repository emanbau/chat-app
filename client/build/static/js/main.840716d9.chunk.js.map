{"version":3,"sources":["Redux/reduxhooks.ts","App.tsx","Redux/loggedin.ts","Redux/store.ts","index.tsx"],"names":["useAppSelector","useSelector","errorLink","onError","graphQLErrors","networkError","map","message","alert","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","state","loggedin","useDispatch","ApolloProvider","className","loggedinSlice","createSlice","name","initialState","reducers","login","logout","actions","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkDC,I,QCGzDC,EAAYC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACtCD,GACFA,EAAcE,KAAI,YAAuB,IAApBC,EAAmB,EAAnBA,QAEnB,OADAC,MAAM,iBAAD,OAAkBD,IAChB,QAGPF,GACFG,MAAMH,MAIJI,EAAOC,eAAK,CAChBR,EACA,IAAIS,IAAS,CAAEC,IAAK,oCAGhBC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXP,KAAMA,IAkBOQ,EAdO,WAEHjB,GAAe,SAAAkB,GAAK,OAAIA,EAAMC,SAASA,YD7BtBC,cCgClC,OAEE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,qBAAKS,UAAU,W,QC5BRC,EAAgBC,YAAY,CACrCC,KAAM,WACNC,aANgC,CAChCP,UAAU,GAMVQ,SAAU,CACNC,MAAO,SAAAV,GACHA,EAAMC,UAAW,GAErBU,OAAQ,SAAAX,GACJA,EAAMC,UAAW,MAKtB,EAA0BI,EAAcO,QAChCP,GADR,EAAQK,MAAR,EAAeC,OACPN,EAAf,SCrBaQ,EAAQC,YAAe,CAChCC,QAAS,CACLd,SAAUA,KCClBe,IAASC,OACP,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.840716d9.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useSelector, useDispatch } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import React from 'react';\nimport './App.scss';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from '@apollo/client'\nimport { onError } from '@apollo/client/link/error';\nimport { login, logout } from './Redux/loggedin';\nimport { useAppSelector, useAppDispatch } from './Redux/reduxhooks';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message }: any) => {\n      alert(`GraphQL error ${message}`);\n      return null;\n    });\n  }\n  if (networkError) {\n    alert(networkError);\n  }\n});\n\nconst link = from([\n  errorLink, \n  new HttpLink({ uri: \"http://localhost:3001/graphql\"})\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n})\n\n\nconst App: React.FC = () => {\n\n  const loggedin = useAppSelector(state => state.loggedin.loggedin);\n  const dispatch = useAppDispatch();\n\n  return (\n    \n    <ApolloProvider client={client}>\n      <div className=\"App\">\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { createSlice } from '@reduxjs/toolkit';\n\ninterface LoggedinState {\n    loggedin: boolean;\n}\n\nconst initialState: LoggedinState = {\n    loggedin: false\n}\n\nexport const loggedinSlice = createSlice({\n    name: 'loggedin',\n    initialState,\n    reducers: {\n        login: state => {\n            state.loggedin = true;\n        },\n        logout: state => {\n            state.loggedin = false;\n        }\n    }\n}) \n\nexport const { login, logout } = loggedinSlice.actions;\nexport default loggedinSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport loggedin from './loggedin';\n\nexport const store = configureStore({\n    reducer: {\n        loggedin: loggedin,\n    }\n})\n\n// export type of state from the store\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './Redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}