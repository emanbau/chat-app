{"version":3,"sources":["pages/Messenger.tsx","Redux/reduxhooks.ts","Redux/loggedin.ts","GraphQL/Queries/User.ts","Redux/account.ts","pages/Login.tsx","App.tsx","Redux/store.ts","index.tsx"],"names":["socket","useAppDispatch","useDispatch","useAppSelector","useSelector","loggedinSlice","createSlice","name","initialState","loggedin","reducers","login","state","logout","actions","LOG_IN","gql","accountSlice","account","username","password","setUsername","action","payload","setPassword","Login","loginHandle","useState","useLazyQuery","variables","getUser","error","loading","data","dispatch","useEffect","console","log","reduxSetUsername","reduxSetPassword","type","placeholder","onChange","e","target","value","onClick","Messenger","inARoom","setInARoom","room","setRoom","accountUsername","messageList","setMessageList","message","setMessage","io","on","sendMessage","a","messageContent","content","author","emit","className","map","errorLink","onError","graphQLErrors","networkError","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","ApolloProvider","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f5e288f1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAppSelector } from '../Redux/reduxhooks';\nimport { io } from 'socket.io-client';\n\ninterface Props {\n    \n}\n\n// Interface for socket message content\ninterface Content {\n    author: string;\n    message: string;\n}\n\ninterface MessageContent {\n    room: string;\n    content: Content;\n}\n\n// Socket IO Setup\nlet socket: any;\nconst CONNECTION_PORT: string = 'localhost:3001/';\n\nconst Messenger: React.FC<Props> = () => {\n\n    // Room States\n    const [inARoom, setInARoom] = useState<boolean>(false);\n    const [room, setRoom] = useState<string>('');\n\n    // Redux User Account Data\n    const accountUsername = useAppSelector(state => state.account.account.username);\n\n    // Message States\n    const [messageList, setMessageList] = useState<Array<Content>>([]);\n    const [message, setMessage] = useState<string>('');\n\n    useEffect(() => {\n        // Setup connection to server on first render\n        socket = io(CONNECTION_PORT);\n    }, [])\n\n    // Connect to room handle\n    const connectToRoom: () => void = () => {\n        setInARoom(true);\n        socket.emit('join_room', room);\n    }\n\n    // Receive Messages\n    useEffect(() => {\n        socket.on('receive_message', (data: Content) => {\n            setMessageList([...messageList, data]);\n        })\n    })\n\n    // Send Message\n    const sendMessage = async (): Promise<void> => {\n        // Message Content\n        let messageContent: MessageContent = {\n            room: room,\n            content: {\n                author: accountUsername,\n                message: message,\n            }\n        };\n\n        setMessageList([...messageList, messageContent.content]);\n        setMessage('');\n        await socket.emit(\"send_message\", messageContent);\n    }\n\n    return (\n        <div>\n            {!inARoom ? (\n                <div className=\"room-selector\">\n                    <input type=\"text\" onChange={(e) => setRoom(e.target.value)} placeholder=\"Enter Room Name\" />\n                    <button onClick={connectToRoom}>Join Room</button>\n                </div>\n            ) : (\n                <div className=\"messenger-page-container\">\n                    <div className=\"chat-container\">\n                        {messageList.map((message: Content) => {\n                            return(                               \n                                <div className=\"messageList-container\">\n                                    <p>{message.author}</p>\n                                    <div className=\"message\">\n                                        <p>{message.message}</p>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className=\"message-input-container\">\n                        <input type=\"text\" placeholder=\"Message\" value={message} onChange={(e) => setMessage(e.target.value)} />\n                        <button onClick={sendMessage}>Send</button>\n                    </div>\n                </div>\n            )\n\n            }\n        </div>\n    )\n}\n\nexport default Messenger\n","import { TypedUseSelectorHook, useSelector, useDispatch } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { createSlice } from '@reduxjs/toolkit';\n\ninterface LoggedinState {\n    loggedin: boolean;\n}\n\nconst initialState: LoggedinState = {\n    loggedin: false\n}\n\nexport const loggedinSlice = createSlice({\n    name: 'loggedin',\n    initialState,\n    reducers: {\n        login: state => {\n            state.loggedin = true;\n        },\n        logout: state => {\n            state.loggedin = false;\n        }\n    }\n}) \n\nexport const { login, logout } = loggedinSlice.actions;\nexport default loggedinSlice.reducer;\n","import { gql } from '@apollo/client';\n\nexport const LOG_IN = gql`\n    query getUser(\n        $username: String!\n        $password: String!\n    ) {\n        getUser(\n            username: $username\n            password: $password\n        ) {\n            username\n            password\n        }\n    }\n`","import { createSlice } from '@reduxjs/toolkit';\n\ninterface Account {\n    username: string;\n    password: string;\n}\n\ninterface AccountState {\n    account: Account\n}\n\nconst initialState: AccountState = {\n    account: {\n        username: '',\n        password: '',\n    }\n}\n\nexport const accountSlice = createSlice({\n    name: 'account',\n    initialState,\n    reducers: {\n        setUsername: (state, action) => {\n            state.account.username = action.payload;\n        },\n        setPassword: (state, action) => {\n            state.account.password = action.payload;\n        },\n        logout: state => {\n            state.account.password = '';\n            state.account.password = '';\n        }\n    }\n}) \n\nexport const { setUsername, setPassword, logout } = accountSlice.actions;\nexport default accountSlice.reducer;","import React, { useState, useEffect } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport { LOG_IN } from '../GraphQL/Queries/User';\nimport { setUsername as reduxSetUsername, setPassword as reduxSetPassword } from '../Redux/account';\nimport { useAppDispatch } from '../Redux/reduxhooks';\n\ninterface Props {\n    loginHandle: () => void\n}\n\nconst Login: React.FC<Props> = ({ loginHandle }) => {\n\n    // Login Field States\n    const [ username, setUsername ] = useState<string>('');\n    const [ password, setPassword ] = useState<string>('');\n\n    // GraphQL Login QueryS\n    const [ getUser, { error, loading, data }] = useLazyQuery(\n        LOG_IN, \n        {variables: {\n            username: username,\n            password: password,\n        }}\n    )\n\n    // Redux States & Reducers\n    const dispatch = useAppDispatch();\n    \n    // Load Login Query\n    useEffect(() => {\n        if (error) console.error(error);\n        if (!loading) console.log(data);\n    }, [error, loading, data])\n\n    // Change Redux State on Successful Login Query\n    useEffect(() => {\n        if (data) {\n            dispatch(reduxSetUsername(username));\n            dispatch(reduxSetPassword(password));\n            loginHandle();\n        }\n    }, [data, username, password, dispatch, loginHandle])\n\n    return (\n        <div>\n            <input \n                type=\"text\"\n                placeholder=\"Username\"\n                onChange={(e) => setUsername(e.target.value)}\n            />\n            <input \n                type=\"text\"\n                placeholder=\"Password\"\n                onChange={(e) => setPassword(e.target.value)}\n            />\n            <button onClick={() => getUser()}>Log In</button>\n        </div>\n    )\n}\n\nexport default Login;\n","import React from 'react';\nimport './App.scss';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from '@apollo/client'\nimport { onError } from '@apollo/client/link/error';\nimport { useAppSelector, useAppDispatch } from './Redux/reduxhooks';\nimport { login } from './Redux/loggedin';\nimport Login from './pages/Login';\nimport Messenger from './pages/Messenger';\n\n// Apollo Client Setup\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message }: any) => {\n      console.log(`GraphQL error ${message}`);\n      return null;\n    });\n  }\n  if (networkError) {\n    console.log(networkError);\n  }\n});\n\nconst link = from([\n  errorLink, \n  new HttpLink({ uri: \"http://localhost:3001/graphql\"})\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n})\n\n\nconst App: React.FC = () => {\n\n  // Redux States & Reducers\n  const loggedin = useAppSelector(state => state.loggedin.loggedin);\n  const dispatch = useAppDispatch();\n\n  // Logged in handler\n  const loginHandle = () => {\n    dispatch(login());\n  }\n\n  return (\n    \n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        {!loggedin ? (\n            <Login loginHandle={loginHandle} />\n          ) : (\n            <Messenger />\n          )\n        }\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport loggedin from './loggedin';\nimport account from './account';\n\nexport const store = configureStore({\n    reducer: {\n        loggedin: loggedin,\n        account: account,\n    }\n})\n\n// export type of state from the store\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './Redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}