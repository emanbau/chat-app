{"version":3,"sources":["App.tsx","index.tsx"],"names":["errorLink","onError","graphQLErrors","networkError","map","message","alert","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","className","ReactDOM","render","document","getElementById"],"mappings":"iMAKMA,EAAYC,aAAQ,YAAsC,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACtCD,GACFA,EAAcE,KAAI,YAAuB,IAApBC,EAAmB,EAAnBA,QAEnB,OADAC,MAAM,iBAAD,OAAkBD,IAChB,QAGPF,GACFG,MAAMH,MAIJI,EAAOC,eAAK,CAChBR,EACA,IAAIS,WAAS,CAAEC,IAAK,oCAGhBC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXP,KAAMA,IAcOQ,EAVO,WACpB,OACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,qBAAKK,UAAU,WC1BrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a01feb67.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from '@apollo/client'\nimport { onError } from '@apollo/client/link/error';\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message }: any) => {\n      alert(`GraphQL error ${message}`);\n      return null;\n    });\n  }\n  if (networkError) {\n    alert(networkError);\n  }\n});\n\nconst link = from([\n  errorLink, \n  new HttpLink({ uri: \"http://localhost:3001/graphql\"})\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n})\n\n\nconst App: React.FC = () => {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        \n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}